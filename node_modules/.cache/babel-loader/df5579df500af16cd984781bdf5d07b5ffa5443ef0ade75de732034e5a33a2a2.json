{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Debor\\\\Documents\\\\facerecognitionbrain\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Navigation from \"./Components/Navigation/Navigation\";\nimport Signin from \"./Components/Signin/Signin\";\nimport Register from \"./Components/Register/Register\";\nimport Logo from \"./Components/Logo/Logo\";\nimport ImageLinkForm from \"./Components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./Components/Rank/Rank\";\nimport FaceRecognition from \"./Components/FaceRecognition/FaceRecognition\";\nimport ParticlesBg from 'particles-bg';\nimport React, { useState } from 'react'; // Importing useState hook\n\n// Clarifai API setup remains the same...\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiRequestOptions = imageUrl => {\n  const PAT = 'dcb52ced76444b13be68163102a8b7fc'; // Correctly declare the PAT\n  const USER_ID = 'cu9ym2eezj7bb'; // Your Clarifai User ID\n  const APP_ID = 'Face-Recognition-Brain'; // Your Clarifai App ID\n  const MODEL_ID = '6dc7e46bc9124c5c8824be4822abe105'; // The model you're using\n\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": imageUrl // The image URL to analyze\n        }\n      }\n    }]\n  });\n  return {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT // Correctly use the PAT here\n    },\n    body: raw\n  };\n};\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\"); // State to store the image URL for recognition\n  const [box, setBox] = useState([]); // State to store bounding box for face detection\n  const [route, setRoute] = useState(\"Signin\"); // State to manage the current route\n  const [isSignedIn, setIsSignedIn] = useState(false); // Default value is 'false'\n  const [user, setUser] = useState({\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  });\n  const loadUser = data => {\n    setUser({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    });\n  };\n\n  // Event handler for input change\n  const onInputChange = event => {\n    setInput(event.target.value); // Update state (if needed)\n  };\n\n  // Function to calculate the bounding box\n  const displayFaceBox = face => {\n    setBox(prevBoxes => [...prevBoxes, face]); // Append new boxes to the array\n  };\n\n  // Function to change the route (e.g., from Signin to Home)\n  const changeRoute = route => {\n    console.log(\"Changing route:\", route); // Debugging line\n    if (route === \"signout\") {\n      setIsSignedIn(false);\n      setRoute(\"Signin\");\n    } else if (route === \"home\") {\n      setIsSignedIn(true);\n    }\n    setRoute(route); // Update the route state\n  };\n\n  // Modify the onButtonSubmit function in App.js\n  const onButtonSubmit = () => {\n    console.log(\"Input URL:\", input);\n    setImageUrl(input); // Update the imageUrl state\n    setBox([]); // Clear previous boxes\n\n    // Clarifai API call via proxy\n    fetch(\"http://localhost:3000/clarifai-proxy\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        imageUrl: input\n      })\n    }).then(response => {\n      console.log(\"Response status:\", response.status);\n      return response.json();\n    }).then(data => {\n      var _data$outputs, _data$outputs$, _data$outputs$$data;\n      console.log(\"Full Clarifai response:\", data);\n\n      // More robust check for face detection\n      const regions = data === null || data === void 0 ? void 0 : (_data$outputs = data.outputs) === null || _data$outputs === void 0 ? void 0 : (_data$outputs$ = _data$outputs[0]) === null || _data$outputs$ === void 0 ? void 0 : (_data$outputs$$data = _data$outputs$.data) === null || _data$outputs$$data === void 0 ? void 0 : _data$outputs$$data.regions;\n      if (regions && regions.length > 0) {\n        const clarifaiFaces = regions.map(region => region.region_info.bounding_box);\n        console.log(\"Detected faces:\", clarifaiFaces);\n\n        // Update box state with detected faces\n        setBox(clarifaiFaces);\n\n        // Update user rank\n        return fetch(\"http://localhost:3000/image\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            id: user.id\n          })\n        });\n      } else {\n        console.log(\"No faces detected in the image.\");\n        return null;\n      }\n    }).then(response => {\n      if (response && response.ok) {\n        return response.json();\n      }\n      return null;\n    }).then(count => {\n      if (count !== null) {\n        // Ensure count is used correctly\n        setUser(prevUser => ({\n          ...prevUser,\n          entries: count // Adjust if the server returns a different structure\n        }));\n        console.log(\"Rank updated successfully:\", count);\n      }\n    }).catch(err => {\n      console.error(\"Error processing image:\", err);\n      alert('Error processing the image');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n      className: \"particles\",\n      type: \"cobweb\",\n      color: \"#ffffff\",\n      num: 300,\n      bg: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n      isSignedIn: isSignedIn,\n      changeRoute: changeRoute\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), route === \"home\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {\n        name: user.name,\n        entries: user.entries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: onInputChange,\n        onButtonSubmit: onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: imageUrl,\n        box: box\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }, this) : route === \"Signin\" ? /*#__PURE__*/_jsxDEV(Signin, {\n      changeRoute: changeRoute\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(Register, {\n      loadUser: loadUser,\n      changeRoute: changeRoute\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0wX/olkLXxhAKMnMwFFwYzgdxGQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navigation","Signin","Register","Logo","ImageLinkForm","Rank","FaceRecognition","ParticlesBg","React","useState","jsxDEV","_jsxDEV","returnClarifaiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","raw","JSON","stringify","method","headers","body","App","_s","input","setInput","setImageUrl","box","setBox","route","setRoute","isSignedIn","setIsSignedIn","user","setUser","id","name","email","entries","joined","loadUser","data","onInputChange","event","target","value","displayFaceBox","face","prevBoxes","changeRoute","console","log","onButtonSubmit","fetch","then","response","status","json","_data$outputs","_data$outputs$","_data$outputs$$data","regions","outputs","length","clarifaiFaces","map","region","region_info","bounding_box","ok","count","prevUser","catch","err","error","alert","className","children","type","color","num","bg","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Debor/Documents/facerecognitionbrain/src/App.js"],"sourcesContent":["import './App.css';\nimport Navigation from \"./Components/Navigation/Navigation\";\nimport Signin from \"./Components/Signin/Signin\";\nimport Register from \"./Components/Register/Register\";\nimport Logo from \"./Components/Logo/Logo\";\nimport ImageLinkForm from \"./Components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./Components/Rank/Rank\";\nimport FaceRecognition from \"./Components/FaceRecognition/FaceRecognition\";\nimport ParticlesBg from 'particles-bg';\nimport React, { useState } from 'react'; // Importing useState hook\n\n// Clarifai API setup remains the same...\nconst returnClarifaiRequestOptions = (imageUrl) => {\n  const PAT = 'dcb52ced76444b13be68163102a8b7fc'; // Correctly declare the PAT\n  const USER_ID = 'cu9ym2eezj7bb'; // Your Clarifai User ID\n  const APP_ID = 'Face-Recognition-Brain'; // Your Clarifai App ID\n  const MODEL_ID = '6dc7e46bc9124c5c8824be4822abe105'; // The model you're using\n\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [\n      {\n        \"data\": {\n          \"image\": {\n            \"url\": imageUrl // The image URL to analyze\n          }\n        }\n      }\n    ]\n  });\n\n  return {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT // Correctly use the PAT here\n    },\n    body: raw\n  };\n};\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\"); // State to store the image URL for recognition\n  const [box, setBox] = useState([]); // State to store bounding box for face detection\n  const [route, setRoute] = useState(\"Signin\"); // State to manage the current route\n  const [isSignedIn, setIsSignedIn] = useState(false); // Default value is 'false'\n  const [user, setUser] = useState({      \n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  });\n\n  const loadUser = (data) => {\n    setUser({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    });\n  };\n\n  // Event handler for input change\n  const onInputChange = (event) => {\n    setInput(event.target.value); // Update state (if needed)\n  };\n\n  // Function to calculate the bounding box\n  const displayFaceBox = (face) => {\n    setBox(prevBoxes => [...prevBoxes, face]); // Append new boxes to the array\n  };\n\n\n\n  // Function to change the route (e.g., from Signin to Home)\n  const changeRoute = (route) => {\n    console.log(\"Changing route:\", route);  // Debugging line\n    if (route === \"signout\") {\n      setIsSignedIn(false);\n      setRoute(\"Signin\");\n    } else if (route === \"home\") {\n      setIsSignedIn(true);\n    }\n    setRoute(route); // Update the route state\n  };\n\n// Modify the onButtonSubmit function in App.js\nconst onButtonSubmit = () => {\n  console.log(\"Input URL:\", input);\n  setImageUrl(input); // Update the imageUrl state\n  setBox([]); // Clear previous boxes\n\n  // Clarifai API call via proxy\n  fetch(\"http://localhost:3000/clarifai-proxy\", {  \n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ imageUrl: input }),\n  })\n    .then(response => {\n      console.log(\"Response status:\", response.status);\n      return response.json();\n    })\n    .then(data => {\n      console.log(\"Full Clarifai response:\", data);\n\n      // More robust check for face detection\n      const regions = data?.outputs?.[0]?.data?.regions;\n      \n      if (regions && regions.length > 0) {\n        const clarifaiFaces = regions.map(region => \n          region.region_info.bounding_box\n        );\n\n        console.log(\"Detected faces:\", clarifaiFaces);\n\n        // Update box state with detected faces\n        setBox(clarifaiFaces);\n\n        // Update user rank\n        return fetch(\"http://localhost:3000/image\", {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ id: user.id }),\n        });\n      } else {\n        console.log(\"No faces detected in the image.\");\n        return null;\n      }\n    })\n    .then(response => {\n      if (response && response.ok) {\n        return response.json();\n      }\n      return null;\n    })\n    .then(count => {\n      if (count !== null) {\n        // Ensure count is used correctly\n        setUser(prevUser => ({\n          ...prevUser,\n          entries: count // Adjust if the server returns a different structure\n        }));\n        console.log(\"Rank updated successfully:\", count);\n      }\n    })\n    .catch(err => {\n      console.error(\"Error processing image:\", err);\n      alert('Error processing the image');\n    });\n};\n\n  return (\n    <div className=\"App\">\n      <ParticlesBg className=\"particles\"\n        type=\"cobweb\"\n        color=\"#ffffff\"\n        num={300}\n        bg={true}\n      />\n      <Navigation isSignedIn={isSignedIn} changeRoute={changeRoute} />\n      {route === \"home\"  \n        ? <div>\n            <Logo />\n            <Rank name={user.name} entries={user.entries} />\n            <ImageLinkForm \n              onInputChange={onInputChange} \n              onButtonSubmit={onButtonSubmit} \n            />\n            <FaceRecognition imageUrl={imageUrl} box={box} />\n          </div>\n          : (\n            route === \"Signin\"\n            ? <Signin changeRoute={changeRoute} />\n            : <Register loadUser={loadUser} changeRoute={changeRoute} />\n            )\n      }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,eAAe,MAAM,8CAA8C;AAC1E,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAC;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,4BAA4B,GAAIC,QAAQ,IAAK;EACjD,MAAMC,GAAG,GAAG,kCAAkC,CAAC,CAAC;EAChD,MAAMC,OAAO,GAAG,eAAe,CAAC,CAAC;EACjC,MAAMC,MAAM,GAAG,wBAAwB,CAAC,CAAC;EACzC,MAAMC,QAAQ,GAAG,kCAAkC,CAAC,CAAC;;EAErD,MAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;IACzB,aAAa,EAAE;MACb,SAAS,EAAEL,OAAO;MAClB,QAAQ,EAAEC;IACZ,CAAC;IACD,QAAQ,EAAE,CACR;MACE,MAAM,EAAE;QACN,OAAO,EAAE;UACP,KAAK,EAAEH,QAAQ,CAAC;QAClB;MACF;IACF,CAAC;EAEL,CAAC,CAAC;EAEF,OAAO;IACLQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,eAAe,EAAE,MAAM,GAAGR,GAAG,CAAC;IAChC,CAAC;IACDS,IAAI,EAAEL;EACR,CAAC;AACH,CAAC;AAED,SAASM,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACI,QAAQ,EAAEe,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACoB,GAAG,EAAEC,MAAM,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpC,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD,MAAM,CAAC0B,IAAI,EAAEC,OAAO,CAAC,GAAG3B,QAAQ,CAAC;IAC/B4B,EAAE,EAAE,EAAE;IACNC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,CAAC;IACVC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAIC,IAAI,IAAK;IACzBP,OAAO,CAAC;MACNC,EAAE,EAAEM,IAAI,CAACN,EAAE;MACXC,IAAI,EAAEK,IAAI,CAACL,IAAI;MACfC,KAAK,EAAEI,IAAI,CAACJ,KAAK;MACjBC,OAAO,EAAEG,IAAI,CAACH,OAAO;MACrBC,MAAM,EAAEE,IAAI,CAACF;IACf,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMG,aAAa,GAAIC,KAAK,IAAK;IAC/BlB,QAAQ,CAACkB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;EACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC/BnB,MAAM,CAACoB,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAED,IAAI,CAAC,CAAC,CAAC,CAAC;EAC7C,CAAC;;EAID;EACA,MAAME,WAAW,GAAIpB,KAAK,IAAK;IAC7BqB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEtB,KAAK,CAAC,CAAC,CAAE;IACxC,IAAIA,KAAK,KAAK,SAAS,EAAE;MACvBG,aAAa,CAAC,KAAK,CAAC;MACpBF,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,MAAM,IAAID,KAAK,KAAK,MAAM,EAAE;MAC3BG,aAAa,CAAC,IAAI,CAAC;IACrB;IACAF,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC;EACnB,CAAC;;EAEH;EACA,MAAMuB,cAAc,GAAGA,CAAA,KAAM;IAC3BF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE3B,KAAK,CAAC;IAChCE,WAAW,CAACF,KAAK,CAAC,CAAC,CAAC;IACpBI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEZ;IACAyB,KAAK,CAAC,sCAAsC,EAAE;MAC5ClC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEJ,IAAI,CAACC,SAAS,CAAC;QAAEP,QAAQ,EAAEa;MAAM,CAAC;IAC1C,CAAC,CAAC,CACC8B,IAAI,CAACC,QAAQ,IAAI;MAChBL,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEI,QAAQ,CAACC,MAAM,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDH,IAAI,CAACb,IAAI,IAAI;MAAA,IAAAiB,aAAA,EAAAC,cAAA,EAAAC,mBAAA;MACZV,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEV,IAAI,CAAC;;MAE5C;MACA,MAAMoB,OAAO,GAAGpB,IAAI,aAAJA,IAAI,wBAAAiB,aAAA,GAAJjB,IAAI,CAAEqB,OAAO,cAAAJ,aAAA,wBAAAC,cAAA,GAAbD,aAAA,CAAgB,CAAC,CAAC,cAAAC,cAAA,wBAAAC,mBAAA,GAAlBD,cAAA,CAAoBlB,IAAI,cAAAmB,mBAAA,uBAAxBA,mBAAA,CAA0BC,OAAO;MAEjD,IAAIA,OAAO,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;QACjC,MAAMC,aAAa,GAAGH,OAAO,CAACI,GAAG,CAACC,MAAM,IACtCA,MAAM,CAACC,WAAW,CAACC,YACrB,CAAC;QAEDlB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEa,aAAa,CAAC;;QAE7C;QACApC,MAAM,CAACoC,aAAa,CAAC;;QAErB;QACA,OAAOX,KAAK,CAAC,6BAA6B,EAAE;UAC1ClC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEJ,IAAI,CAACC,SAAS,CAAC;YAAEiB,EAAE,EAAEF,IAAI,CAACE;UAAG,CAAC;QACtC,CAAC,CAAC;MACJ,CAAC,MAAM;QACLe,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,OAAO,IAAI;MACb;IACF,CAAC,CAAC,CACDG,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,IAAIA,QAAQ,CAACc,EAAE,EAAE;QAC3B,OAAOd,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB;MACA,OAAO,IAAI;IACb,CAAC,CAAC,CACDH,IAAI,CAACgB,KAAK,IAAI;MACb,IAAIA,KAAK,KAAK,IAAI,EAAE;QAClB;QACApC,OAAO,CAACqC,QAAQ,KAAK;UACnB,GAAGA,QAAQ;UACXjC,OAAO,EAAEgC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;QACHpB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEmB,KAAK,CAAC;MAClD;IACF,CAAC,CAAC,CACDE,KAAK,CAACC,GAAG,IAAI;MACZvB,OAAO,CAACwB,KAAK,CAAC,yBAAyB,EAAED,GAAG,CAAC;MAC7CE,KAAK,CAAC,4BAA4B,CAAC;IACrC,CAAC,CAAC;EACN,CAAC;EAEC,oBACElE,OAAA;IAAKmE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpE,OAAA,CAACJ,WAAW;MAACuE,SAAS,EAAC,WAAW;MAChCE,IAAI,EAAC,QAAQ;MACbC,KAAK,EAAC,SAAS;MACfC,GAAG,EAAE,GAAI;MACTC,EAAE,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACF5E,OAAA,CAACX,UAAU;MAACiC,UAAU,EAAEA,UAAW;MAACkB,WAAW,EAAEA;IAAY;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/DxD,KAAK,KAAK,MAAM,gBACbpB,OAAA;MAAAoE,QAAA,gBACEpE,OAAA,CAACR,IAAI;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACR5E,OAAA,CAACN,IAAI;QAACiC,IAAI,EAAEH,IAAI,CAACG,IAAK;QAACE,OAAO,EAAEL,IAAI,CAACK;MAAQ;QAAA4C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChD5E,OAAA,CAACP,aAAa;QACZwC,aAAa,EAAEA,aAAc;QAC7BU,cAAc,EAAEA;MAAe;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACF5E,OAAA,CAACL,eAAe;QAACO,QAAQ,EAAEA,QAAS;QAACgB,GAAG,EAAEA;MAAI;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,GAEJxD,KAAK,KAAK,QAAQ,gBAChBpB,OAAA,CAACV,MAAM;MAACkD,WAAW,EAAEA;IAAY;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBACpC5E,OAAA,CAACT,QAAQ;MAACwC,QAAQ,EAAEA,QAAS;MAACS,WAAW,EAAEA;IAAY;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC1D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEJ,CAAC;AAEV;AAAC9D,EAAA,CA5IQD,GAAG;AAAAgE,EAAA,GAAHhE,GAAG;AA8IZ,eAAeA,GAAG;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}